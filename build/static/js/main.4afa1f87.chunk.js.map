{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","Seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","user","Rooms","setRooms","IconButton","photoURL","placeholder","type","room","key","Chat","Input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","console","log","displayName","onChange","e","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4afa1f87.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDS3ck7vWwRNpTZRRUfe5aGkginuQvi_ns\",\n    authDomain: \"whatsapp-clone-72206.firebaseapp.com\",\n    databaseURL: \"https://whatsapp-clone-72206.firebaseio.com\",\n    projectId: \"whatsapp-clone-72206\",\n    storageBucket: \"whatsapp-clone-72206.appspot.com\",\n    messagingSenderId: \"218764665126\",\n    appId: \"1:218764665126:web:bc5939e1a4e1f064b3e1e7\",\n    measurementId: \"G-7TLCCC7L2G\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig)\n\n\n  const db= firebaseApp.firestore()\n  const auth= firebase.auth()\n  const provider = new firebase.auth.GoogleAuthProvider()\n\n\nexport {auth, provider};\n\nexport default db;\n","import React, {useEffect, useState} from 'react'\n\nimport './SidebarChat.css'\nimport { Avatar } from '@material-ui/core'\n\nimport db from './firebase'\nimport { Link } from 'react-router-dom'\n\n\nfunction SidebarChat({id, name, addNewChat}) {\n    const [Seed, setSeed] = useState('')\n    const [messages, setMessages] = useState([])\n\n\n    useEffect(() => {\n\n        if(id){\n            db.collection('rooms').doc(id).collection('messages').orderBy('timestamp','desc').onSnapshot((snapshot)=> setMessages(snapshot.docs.map((doc)=>doc.data())))\n        }\n\n    }, [id])\n\n    useEffect(() => {\n        \n        setSeed(id)\n        // return () => {\n        //     setSeed(Math.floor(Math.random()*5000))\n        // }\n\n    }, [id])\n\n    const createchat= ()=>{\n        const roomName= prompt(\"Enter the room Name for chat\")\n\n        if(roomName){\n            // Do some clever stuff!!\n            db.collection('rooms').add({\n                name:roomName,\n            })\n        }\n\n    }\n\n\n    return !addNewChat ? (\n        <Link to={`/rooms/${id}`}>\n            <div className=\"SidebarChat\">\n                \n                <Avatar src={`https://avatars.dicebear.com/api/human/${Seed}.svg`}/>   \n                <div className=\"sidebarChat__info\">\n                    <h2>{name}</h2>\n                    <p>{messages[0]?.message}</p>\n                </div>\n\n            </div>\n        </Link>\n    ):\n    (\n        <div onClick={createchat} className=\"SidebarChat\">\n\n    \n       \n            <h2>Add new Chat</h2>\n       \n    </div>\n    )\n}\n\nexport default SidebarChat\n","import React, {createContext, useReducer, useContext} from 'react'\n\nexport const StateContext =createContext()\n\n\nexport const StateProvider=({reducer, initialState, children}) =>(\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n)\n\nexport const useStateValue = () =>  useContext(StateContext)","import React, {useEffect, useState} from 'react'\n\nimport './Sidebar.css'\n\nimport { Avatar, IconButton} from '@material-ui/core'\n\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\n\n\n\nimport SidebarChat from './SidebarChat'\n\nimport db from './firebase'\n\nimport {useStateValue} from './StateProvider'\n\nfunction Sidebar() {\n\n    const [{user}, dispatch] = useStateValue()\n\n    const [Rooms, setRooms] = useState([])\n\n    const unSubscribe = () =>{\n        db.collection('rooms').onSnapshot(snapshot =>{\n            setRooms(snapshot.docs.map(doc=>{\n                return{\n                    id:doc.id,\n                    data:doc.data(),\n                }\n            }))\n        })\n    }\n\n    useEffect(() => {\n        \n\n        \n        unSubscribe()\n\n\n    }, [])\n\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__header\">\n                <IconButton>\n                    <Avatar src={user?.photoURL}/>\n\n                </IconButton>\n                <div className=\"sidebar__headerRight\">\n                    <IconButton>\n                        <DonutLargeIcon/>\n                    </IconButton>\n                    <IconButton>\n                        <ChatIcon/>\n                    </IconButton>\n                    <IconButton>\n                        <MoreVertIcon/>\n                    </IconButton>\n         \n                </div>\n\n            </div>\n\n            <div className=\"sidebar__search\">\n                <div className=\"sidebar__searchContainer\">\n                    <SearchOutlinedIcon />\n                    <input placeholder=\"Search or Start a new Chat\" type=\"text\" />\n                </div>\n            </div>\n\n            <div className=\"sidebar__chats\">\n                <SidebarChat addNewChat/>\n                {\n                    Rooms.map(room=>{\n                        return(<SidebarChat key={room.id} id={room.id} name={room.data.name}/>)\n                    })\n                }\n                \n            </div>\n            \n        </div>\n    )\n\n}\n\nexport default Sidebar\n","import React, {useEffect, useState} from 'react'\n\nimport './Chat.css';\nimport { Avatar, IconButton} from '@material-ui/core'\n\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\n\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport { useParams } from 'react-router-dom';\n\nimport db from './firebase'\n\nimport {useStateValue} from './StateProvider'\n\nimport firebase from 'firebase'\n\nfunction Chat() {\n\n    const [Input, setInput] = useState('')\n\n    const [Seed, setSeed] = useState('')\n\n    const {roomId} =useParams();\n\n    const [roomName, setRoomName] = useState('')\n\n\n    const [messages, setMessages] = useState([])\n\n    const [{user}, dispatch] = useStateValue()\n\n\n    useEffect(() => {\n        if(roomId){\n            db.collection(\"rooms\").doc(roomId).onSnapshot((snapshot) => setRoomName(snapshot.data().name))\n\n            db.collection(\"rooms\").doc(roomId).collection(\"messages\").orderBy('timestamp',\"asc\").onSnapshot(snapshot=>{\n                \n                return(setMessages(snapshot.docs.map((doc) => {\n                    return doc.data()\n                } )))\n\n            }\n            )\n\n            \n        }\n\n    }, [roomId])\n\n    useEffect(() => {\n        \n        setSeed(roomId)\n        // return () => {\n        //     setSeed(Math.floor(Math.random()*5000))\n        // }\n\n    }, [roomId])\n\n    const sendMessage= (e) => {\n        e.preventDefault()\n        console.log(\"you typed >> \", Input)\n\n        db.collection(\"rooms\").doc(roomId).collection(\"messages\").add(\n            {\n                message:Input,\n                name:user.displayName,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n\n            }\n        )\n\n        setInput('')\n    }\n\n    return (\n        <div className=\"chat\">\n            <div className=\"chat__header\">\n                <Avatar src={`https://avatars.dicebear.com/api/human/${Seed}.svg`}/> \n                <div className=\"chat__headerInfo\">\n                    <h3>{roomName}</h3>\n                    <p>Last seen {\" \"}{new Date(messages[messages.length-1]?.timestamp?.toDate()).toUTCString()}</p>\n                </div>\n                <div className=\"chat__headerRight\">\n                    <IconButton>\n                        <SearchOutlinedIcon/>\n                    </IconButton>\n                    <IconButton>\n                        <AttachFileIcon/>\n                    </IconButton>\n                    <IconButton>\n                        <MoreVertIcon/>\n                    </IconButton>\n         \n                </div>\n\n            </div>\n\n            <div className=\"chat__body\">\n\n                {messages.map((message)=>{\n                    console.log(message)\n                    \n                    return(\n\n                <p  className={`chat__message ${message.name === user.displayName && 'chat__reciever'}`}>\n                <span className=\"chat__name\">{message.name}</span>\n                {message.message}\n                <span className=\"chat__timestamp\">\n                    {new Date(message.timestamp?.toDate()).toUTCString()}\n                    </span>\n                </p>\n\n                )}\n                \n                )}\n\n\n\n            </div>\n\n            <div className=\"chat__footer\">\n                <InsertEmoticonIcon/>\n                    <form>\n\n\n                        <input  type=\"text\" placeholder=\"Type a message\" value={Input} onChange={(e)=>{\n                            setInput(e.target.value)\n                        }} />                  \n\n\n                        <button type=\"submit\" onClick={sendMessage} >Send a Message</button>\n                    </form>\n                <MicIcon/>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","export const initialState ={\n    user:null,\n}\n\nexport const actionTypes ={\n    SET_USER: \"SET_USER\",\n}\n\nconst reducer = (state, action) =>{\n    console.log(action);\n    switch(action.type){\n        case actionTypes.SET_USER:\n            return{\n                ...state,\n                user:action.user,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import React from 'react'\n\nimport { Button } from '@material-ui/core'\n\nimport './Login.css'\n\nimport {auth, provider} from './firebase'\n\nimport {useStateValue} from './StateProvider'\nimport {actionTypes} from './reducer'\n\n\nfunction Login() {\n\n    const [{}, dispatch] = useStateValue()\n\n    const signIn = () =>{\n        auth.signInWithPopup(provider).then((result) =>{\n            dispatch({\n                type: actionTypes.SET_USER,\n                user: result.user,\n            }\n            )\n\n\n        }).catch(\n            (error)=>{\n                return alert(error.message)\n            }\n        )\n    }\n\n    return (\n        <div className=\"login\">\n            <div className=\"login__container\">\n\n                <img\n                    src=\"/logo.png\"\n                    alt=\"logo\"\n                />\n\n                <div className=\"login__text\">\n                    <h1>Sign In to Whatsapp Clone</h1>\n                </div>\n\n                <Button onClick={signIn}>\n                    Sign In with Google\n                </Button>\n\n\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Login\n","import React, {useEffect, useState} from 'react'\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Sidebar from './Sidebar'\nimport Chat from './Chat'\n\nimport Login from './Login'\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport {useStateValue} from './StateProvider'\n\nfunction App() {\n\n  // const [user, setUser] = useState(null)\n\n  const [{user}, dispatch] = useStateValue()\n\n  return (\n    <div className=\"app\">\n\n      {!user ?\n\n      (\n\n        <Login />\n\n      ):\n      (\n      <div className=\"app__body\">\n        <Router>\n          <Sidebar />\n          \n          <Switch>\n            \n          \n            <Route path=\"/rooms/:roomId\">\n              \n              <Chat />\n            </Route>\n\n            <Route path=\"/\">\n              <h1>Welcome to Whatsapp Clone</h1>\n            </Route>\n\n          </Switch>\n        </Router>\n\n      </div>\n      )\n\n\n  }\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer, {initialState} from './reducer'\nimport {StateProvider} from './StateProvider'\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}